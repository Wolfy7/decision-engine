name: CI

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUSTFLAGS: "-D warnings"

jobs:
  formatting:
    name: Check formatting
    runs-on: hyperswitch-runners
    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository with token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: rustfmt

      - name: Run formatter
        shell: bash
        run: |
          cargo +nightly fmt --all
          if ! git diff --exit-code --quiet -- src; then
            echo "::notice::Formatting check failed"
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add src
            git commit --message 'chore: run formatter'
            git push
          fi

  check-msrv:
    name: Check compilation on MSRV toolchain
    runs-on: hyperswitch-runners

    env:
      # Use `sccache` for caching compilation artifacts
      RUSTC_WRAPPER: sccache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Get rust version from Cargo.toml
        shell: bash
        run: |
          rust_version=$(yq -oy '.package.rust-version' Cargo.toml)
          echo "rust_version=${rust_version}" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "${{ env.rust_version }}"

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache
          checksum: true

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
          checksum: true

      - name: Run `cargo hack`
        shell: bash
        run: cargo hack check --each-feature --all-targets --package dynamo

  test:
    name: Run tests on stable toolchain
    runs-on: hyperswitch-runners

    env:
      # Use `sccache` for caching compilation artifacts
      RUSTC_WRAPPER: sccache

    services:
      redis:
        image: "public.ecr.aws/docker/library/redis:alpine"
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.HYPERSWITCH_BOT_APP_ID }}
          private-key: ${{ secrets.HYPERSWITCH_BOT_APP_PRIVATE_KEY }}

      - name: Checkout repository with token
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ steps.generate_token.outputs.token }}

      - name: Install mold linker
        uses: rui314/setup-mold@v1
        if: ${{ runner.os == 'Linux' }}
        with:
          make-default: true

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable 2 weeks ago
          components: clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack
          checksum: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest
          checksum: true

      - name: Install sccache
        uses: taiki-e/install-action@v2
        with:
          tool: sccache
          checksum: true

      - name: Run clippy
        shell: bash
        run: cargo clippy --all-features --all-targets

      - name: Check Cargo.lock changed
        shell: bash
        run: |
          if ! git diff --quiet --exit-code -- Cargo.lock ; then
            git config --local user.name 'hyperswitch-bot[bot]'
            git config --local user.email '148525504+hyperswitch-bot[bot]@users.noreply.github.com'
            git add Cargo.lock
            git commit --message 'chore: update Cargo.lock'
            git push
          fi

      - name: Cargo hack
        shell: bash
        run: cargo hack check --each-feature --no-dev-deps

      - name: Run unit tests
        shell: bash
        run: |
          cargo nextest run --profile ci --all-features
          cargo test --doc --all-features

  typos:
    name: Spell check
    runs-on: hyperswitch-runners
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install typos-cli
        shell: bash
        run: cargo binstall typos-cli -y
        
      - name: Spell check
        shell: bash
        run: typos

