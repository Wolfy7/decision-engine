use serde::{Deserialize, Serialize};

use crate::error::ApiError;

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum PaymentFlow {
    Card3ds,
    Card3ds2,
    CardDotp,
    CardMoto,
    CardNo3ds,
    CardVies,
    ZeroAuth,
    CardTokenization,
    CVVLESS,
    DirectDebit,
    EMANDATE,
    EMI,
    InappDebit,
    MANDATE,
    PartialCapture,
    PartialVoid,
    PartialPayment,
    PREAUTH,
    SdklessIntent,
    SplitPayment,
    SplitSettlement,
    TOPUP,
    TPV,
    VisaCheckout,
    OUTAGE,
    SrBasedRouting,
    EliminationBasedRouting,
    PlBasedRouting,
    MandateWorkflow,
    ALTID,
    SURCHARGE,
    OFFER,
    CAPTCHA,
    PaymentCollectionLink,
    AutoRefund,
    PaymentLink,
    PaymentForm,
    RiskCheck,
    DynamicCurrencyConversion,
    PartPayment,
    StandaloneAuthentication,
    StandaloneAuthorization,
    StandaloneCapture,
    AuthnAuthz,
    AuthzCapture,
    RedirectDebit,
    LinkAndDebit,
    NewCard,
    InstantRefund,
    ASYNC,
    DOTP,
    MerchantManagedDebit,
    AddressVerification,
    Frictionless3ds,
    TaFile,
    FIDO,
    REFUND,
    CTP,
    OneTimePayment,
    ReversePennyDrop,
    OnDemandSplitSettlement,
    CreditCardOnUpi,
    DeciderFallbackDotpTo3ds,
    DeciderFallbackNo3dsTo3ds,
    PaymentChannelFallbackDotpTo3ds,
    PgFailureFallbackDotpTo3ds,
    TokenizationConsentFallbackDotpTo3ds,
    CustomerFallbackDotpTo3ds,
    AuthProviderFallback3ds2To3ds,
    FrmPreferenceToNo3ds,
    MerchantFallback3ds2To3ds,
    MerchantFallbackFidoTo3ds,
    OrderPreferenceFallbackNo3dsTo3ds,
    MerchantPreferenceFallbackNo3dsTo3ds,
    OrderPreferenceToNo3ds,
    MutualFund,
    CrossBorderPayment,
    ApplepayTokenDecryptionFlow,
    OneTimeMandate,
    SingleBlockMultipleDebit,
    SilentRetry,
    WalletTopup,
    NetworkTokenCreated,
    IssuerTokenCreated,
    LockerTokenCreated,
    SodexoTokenCreated,
    NetworkTokenUsed,
    IssuerTokenUsed,
    LockerTokenUsed,
    SodexoTokenUsed,
    PayuTokenUsed,
    MandateRegister,
    MandateRegisterDebit,
    MandatePayment,
    EmandateRegister,
    EmandateRegisterDebit,
    EmandatePayment,
    SiHub,
    TpvEmandate,
    COLLECT,
    INTENT,
    INAPP,
    QR,
    PushPay,
    NoCostEmi,
    LowCostEmi,
    StandardEmi,
    StandardEmiSplit,
    InternalNoCostEmi,
    InternalLowCostEmi,
    InternalNoCostEmiSplit,
    InternalLowCostEmiSplit,
    DirectBankEmi,
    PgEmi,
    AutoDisbursement,
    AutoUserRegistration,
    BankInstantRefund,
    MandatePredebitNotificationDisablement,
    OrderAmountAsSubventionAmount,
    OrderIdAsReconId,
    PassUserTokenToGateway,
    S2sFlow,
    SplitSettleOnly,
    SubscriptionOnly,
    TpvOnly,
    TxnUuidAsTr,
    UpiIntentRegistration,
    V2Integration,
    V2LinkAndPay,
    VPOS2,
    PaymentPage,
    PpQuickpay,
    PpRetry,
    InappNewPay,
    InappRepeatPay,
}

pub fn payment_flows_to_text(payment_flow: &PaymentFlow) -> String {
    match payment_flow {
        PaymentFlow::Card3ds => "CARD_3DS".to_string(),
        PaymentFlow::Card3ds2 => "CARD_3DS2".to_string(),
        PaymentFlow::Frictionless3ds => "FRICTIONLESS_3DS".to_string(),
        PaymentFlow::CardDotp => "CARD_DOTP".to_string(),
        PaymentFlow::CardMoto => "CARD_MOTO".to_string(),
        PaymentFlow::CardNo3ds => "CARD_NO_3DS".to_string(),
        PaymentFlow::CardVies => "CARD_VIES".to_string(),
        PaymentFlow::ZeroAuth => "ZERO_AUTH".to_string(),
        PaymentFlow::CardTokenization => "CARD_TOKENIZATION".to_string(),
        PaymentFlow::CVVLESS => "CVVLESS".to_string(),
        PaymentFlow::DirectDebit => "DIRECT_DEBIT".to_string(),
        PaymentFlow::EMANDATE => "EMANDATE".to_string(),
        PaymentFlow::EMI => "EMI".to_string(),
        PaymentFlow::InappDebit => "INAPP_DEBIT".to_string(),
        PaymentFlow::MANDATE => "MANDATE".to_string(),
        PaymentFlow::PartialCapture => "PARTIAL_CAPTURE".to_string(),
        PaymentFlow::PartialVoid => "PARTIAL_VOID".to_string(),
        PaymentFlow::PartialPayment => "PARTIAL_PAYMENT".to_string(),
        PaymentFlow::PREAUTH => "PREAUTH".to_string(),
        PaymentFlow::SdklessIntent => "SDKLESS_INTENT".to_string(),
        PaymentFlow::SplitPayment => "SPLIT_PAYMENT".to_string(),
        PaymentFlow::SplitSettlement => "SPLIT_SETTLEMENT".to_string(),
        PaymentFlow::WalletTopup => "WALLET_TOPUP".to_string(),
        PaymentFlow::TPV => "TPV".to_string(),
        PaymentFlow::VisaCheckout => "VISA_CHECKOUT".to_string(),
        PaymentFlow::AutoDisbursement => "AUTO_DISBURSEMENT".to_string(),
        PaymentFlow::AutoUserRegistration => "AUTO_USER_REGISTRATION".to_string(),
        PaymentFlow::BankInstantRefund => "BANK_INSTANT_REFUND".to_string(),
        PaymentFlow::MandatePredebitNotificationDisablement => {
            "MANDATE_PREDEBIT_NOTIFICATION_DISABLEMENT".to_string()
        }
        PaymentFlow::OrderAmountAsSubventionAmount => {
            "ORDER_AMOUNT_AS_SUBVENTION_AMOUNT".to_string()
        }
        PaymentFlow::OrderIdAsReconId => "ORDER_ID_AS_RECON_ID".to_string(),
        PaymentFlow::PassUserTokenToGateway => "PASS_USER_TOKEN_TO_GATEWAY".to_string(),
        PaymentFlow::S2sFlow => "S2S_FLOW".to_string(),
        PaymentFlow::SplitSettleOnly => "SPLIT_SETTLE_ONLY".to_string(),
        PaymentFlow::SubscriptionOnly => "SUBSCRIPTION_ONLY".to_string(),
        PaymentFlow::TpvOnly => "TPV_ONLY".to_string(),
        PaymentFlow::TxnUuidAsTr => "TXN_UUID_AS_TR".to_string(),
        PaymentFlow::UpiIntentRegistration => "UPI_INTENT_REGISTRATION".to_string(),
        PaymentFlow::V2Integration => "V2_INTEGRATION".to_string(),
        PaymentFlow::V2LinkAndPay => "V2_LINK_AND_PAY".to_string(),
        PaymentFlow::VPOS2 => "VPOS2".to_string(),
        PaymentFlow::OUTAGE => "OUTAGE".to_string(),
        PaymentFlow::SrBasedRouting => "SR_BASED_ROUTING".to_string(),
        PaymentFlow::EliminationBasedRouting => "ELIMINATION_BASED_ROUTING".to_string(),
        PaymentFlow::PlBasedRouting => "PL_BASED_ROUTING".to_string(),
        PaymentFlow::MandateWorkflow => "MANDATE_WORKFLOW".to_string(),
        PaymentFlow::ALTID => "ALTID".to_string(),
        PaymentFlow::SURCHARGE => "SURCHARGE".to_string(),
        PaymentFlow::OFFER => "OFFER".to_string(),
        PaymentFlow::CAPTCHA => "CAPTCHA".to_string(),
        PaymentFlow::PaymentCollectionLink => "PAYMENT_COLLECTION_LINK".to_string(),
        PaymentFlow::AutoRefund => "AUTO_REFUND".to_string(),
        PaymentFlow::PaymentLink => "PAYMENT_LINK".to_string(),
        PaymentFlow::PaymentForm => "PAYMENT_FORM".to_string(),
        PaymentFlow::RiskCheck => "RISK_CHECK".to_string(),
        PaymentFlow::DynamicCurrencyConversion => "DYNAMIC_CURRENCY_CONVERSION".to_string(),
        PaymentFlow::PartPayment => "PART_PAYMENT".to_string(),
        PaymentFlow::StandaloneAuthentication => "STANDALONE_AUTHENTICATION".to_string(),
        PaymentFlow::StandaloneAuthorization => "STANDALONE_AUTHORIZATION".to_string(),
        PaymentFlow::StandaloneCapture => "STANDALONE_CAPTURE".to_string(),
        PaymentFlow::AuthnAuthz => "AUTHN_AUTHZ".to_string(),
        PaymentFlow::AuthzCapture => "AUTHZ_CAPTURE".to_string(),
        PaymentFlow::RedirectDebit => "REDIRECT_DEBIT".to_string(),
        PaymentFlow::LinkAndDebit => "LINK_AND_DEBIT".to_string(),
        PaymentFlow::NewCard => "NEW_CARD".to_string(),
        PaymentFlow::NetworkTokenCreated => "NETWORK_TOKEN_CREATED".to_string(),
        PaymentFlow::IssuerTokenCreated => "ISSUER_TOKEN_CREATED".to_string(),
        PaymentFlow::LockerTokenCreated => "LOCKER_TOKEN_CREATED".to_string(),
        PaymentFlow::SodexoTokenCreated => "SODEXO_TOKEN_CREATED".to_string(),
        PaymentFlow::NetworkTokenUsed => "NETWORK_TOKEN_USED".to_string(),
        PaymentFlow::IssuerTokenUsed => "ISSUER_TOKEN_USED".to_string(),
        PaymentFlow::LockerTokenUsed => "LOCKER_TOKEN_USED".to_string(),
        PaymentFlow::SodexoTokenUsed => "SODEXO_TOKEN_USED".to_string(),
        PaymentFlow::PayuTokenUsed => "PAYU_TOKEN_USED".to_string(),
        PaymentFlow::MandateRegister => "MANDATE_REGISTER".to_string(),
        PaymentFlow::MandateRegisterDebit => "MANDATE_REGISTER_DEBIT".to_string(),
        PaymentFlow::MandatePayment => "MANDATE_PAYMENT".to_string(),
        PaymentFlow::EmandateRegister => "EMANDATE_REGISTER".to_string(),
        PaymentFlow::EmandateRegisterDebit => "EMANDATE_REGISTER_DEBIT".to_string(),
        PaymentFlow::EmandatePayment => "EMANDATE_PAYMENT".to_string(),
        PaymentFlow::SiHub => "SI_HUB".to_string(),
        PaymentFlow::TpvEmandate => "TPV_EMANDATE".to_string(),
        PaymentFlow::COLLECT => "COLLECT".to_string(),
        PaymentFlow::INTENT => "INTENT".to_string(),
        PaymentFlow::INAPP => "INAPP".to_string(),
        PaymentFlow::QR => "QR".to_string(),
        PaymentFlow::PushPay => "PUSH_PAY".to_string(),
        PaymentFlow::InstantRefund => "INSTANT_REFUND".to_string(),
        PaymentFlow::ASYNC => "ASYNC".to_string(),
        PaymentFlow::DOTP => "DOTP".to_string(),
        PaymentFlow::MerchantManagedDebit => "MERCHANT_MANAGED_DEBIT".to_string(),
        PaymentFlow::AddressVerification => "ADDRESS_VERIFICATION".to_string(),
        PaymentFlow::TaFile => "TA_FILE".to_string(),
        PaymentFlow::PaymentPage => "PAYMENT_PAGE".to_string(),
        PaymentFlow::PpQuickpay => "PP_QUICKPAY".to_string(),
        PaymentFlow::PpRetry => "PP_RETRY".to_string(),
        PaymentFlow::InappNewPay => "INAPP_NEW_PAY".to_string(),
        PaymentFlow::InappRepeatPay => "INAPP_REPEAT_PAY".to_string(),
        PaymentFlow::PgEmi => "PG_EMI".to_string(),
        PaymentFlow::SilentRetry => "SILENT_RETRY".to_string(),
        PaymentFlow::FIDO => "FIDO".to_string(),
        PaymentFlow::REFUND => "REFUND".to_string(),
        PaymentFlow::CTP => "CTP".to_string(),
        PaymentFlow::OneTimePayment => "ONE_TIME_PAYMENT".to_string(),
        PaymentFlow::NoCostEmi => "NO_COST_EMI".to_string(),
        PaymentFlow::LowCostEmi => "LOW_COST_EMI".to_string(),
        PaymentFlow::StandardEmi => "STANDARD_EMI".to_string(),
        PaymentFlow::StandardEmiSplit => "STANDARD_EMI_SPLIT".to_string(),
        PaymentFlow::InternalNoCostEmi => "INTERNAL_NO_COST_EMI".to_string(),
        PaymentFlow::InternalLowCostEmi => "INTERNAL_LOW_COST_EMI".to_string(),
        PaymentFlow::InternalNoCostEmiSplit => "INTERNAL_NO_COST_EMI_SPLIT".to_string(),
        PaymentFlow::InternalLowCostEmiSplit => "INTERNAL_LOW_COST_EMI_SPLIT".to_string(),
        PaymentFlow::DirectBankEmi => "DIRECT_BANK_EMI".to_string(),
        PaymentFlow::ReversePennyDrop => "REVERSE_PENNY_DROP".to_string(),
        PaymentFlow::TOPUP => "TOPUP".to_string(),
        PaymentFlow::OnDemandSplitSettlement => "ON_DEMAND_SPLIT_SETTLEMENT".to_string(),
        PaymentFlow::CreditCardOnUpi => "CREDIT_CARD_ON_UPI".to_string(),
        PaymentFlow::DeciderFallbackDotpTo3ds => "DECIDER_FALLBACK_DOTP_TO_3DS".to_string(),
        PaymentFlow::DeciderFallbackNo3dsTo3ds => "DECIDER_FALLBACK_NO_3DS_TO_3DS".to_string(),
        PaymentFlow::PaymentChannelFallbackDotpTo3ds => {
            "PAYMENT_CHANNEL_FALLBACK_DOTP_TO_3DS".to_string()
        }
        PaymentFlow::PgFailureFallbackDotpTo3ds => "PG_FAILURE_FALLBACK_DOTP_TO_3DS".to_string(),
        PaymentFlow::TokenizationConsentFallbackDotpTo3ds => {
            "TOKENIZATION_CONSENT_FALLBACK_DOTP_TO_3DS".to_string()
        }
        PaymentFlow::CustomerFallbackDotpTo3ds => "CUSTOMER_FALLBACK_DOTP_TO_3DS".to_string(),
        PaymentFlow::AuthProviderFallback3ds2To3ds => {
            "AUTH_PROVIDER_FALLBACK_3DS2_TO_3DS".to_string()
        }
        PaymentFlow::FrmPreferenceToNo3ds => "FRM_PREFERENCE_TO_NO_3DS".to_string(),
        PaymentFlow::MerchantFallback3ds2To3ds => "MERCHANT_FALLBACK_3DS2_TO_3DS".to_string(),
        PaymentFlow::MerchantFallbackFidoTo3ds => "MERCHANT_FALLBACK_FIDO_TO_3DS".to_string(),
        PaymentFlow::OrderPreferenceFallbackNo3dsTo3ds => {
            "ORDER_PREFERENCE_FALLBACK_NO_3DS_TO_3DS".to_string()
        }
        PaymentFlow::MerchantPreferenceFallbackNo3dsTo3ds => {
            "MERCHANT_PREFERENCE_FALLBACK_NO_3DS_TO_3DS".to_string()
        }
        PaymentFlow::OrderPreferenceToNo3ds => "ORDER_PREFERENCE_TO_NO_3DS".to_string(),
        PaymentFlow::MutualFund => "MUTUAL_FUND".to_string(),
        PaymentFlow::CrossBorderPayment => "CROSS_BORDER_PAYMENT".to_string(),
        PaymentFlow::ApplepayTokenDecryptionFlow => "APPLEPAY_TOKEN_DECRYPTION_FLOW".to_string(),
        PaymentFlow::OneTimeMandate => "ONE_TIME_MANDATE".to_string(),
        PaymentFlow::SingleBlockMultipleDebit => "SINGLE_BLOCK_MULTIPLE_DEBIT".to_string(),
    }
}

pub fn text_to_payment_flows(text: String) -> Result<PaymentFlow, ApiError> {
    match text.as_str() {
        "CARD_3DS" => Ok(PaymentFlow::Card3ds),
        "CARD_3DS2" => Ok(PaymentFlow::Card3ds2),
        "FRICTIONLESS_3DS" => Ok(PaymentFlow::Frictionless3ds),
        "CARD_DOTP" => Ok(PaymentFlow::CardDotp),
        "CARD_MOTO" => Ok(PaymentFlow::CardMoto),
        "CARD_NO_3DS" => Ok(PaymentFlow::CardNo3ds),
        "CARD_VIES" => Ok(PaymentFlow::CardVies),
        "ZERO_AUTH" => Ok(PaymentFlow::ZeroAuth),
        "CARD_TOKENIZATION" => Ok(PaymentFlow::CardTokenization),
        "CVVLESS" => Ok(PaymentFlow::CVVLESS),
        "DIRECT_DEBIT" => Ok(PaymentFlow::DirectDebit),
        "EMANDATE" => Ok(PaymentFlow::EMANDATE),
        "EMI" => Ok(PaymentFlow::EMI),
        "INAPP_DEBIT" => Ok(PaymentFlow::InappDebit),
        "MANDATE" => Ok(PaymentFlow::MANDATE),
        "PARTIAL_CAPTURE" => Ok(PaymentFlow::PartialCapture),
        "PARTIAL_VOID" => Ok(PaymentFlow::PartialVoid),
        "PARTIAL_PAYMENT" => Ok(PaymentFlow::PartialPayment),
        "PREAUTH" => Ok(PaymentFlow::PREAUTH),
        "SDKLESS_INTENT" => Ok(PaymentFlow::SdklessIntent),
        "SPLIT_PAYMENT" => Ok(PaymentFlow::SplitPayment),
        "SPLIT_SETTLEMENT" => Ok(PaymentFlow::SplitSettlement),
        "WALLET_TOPUP" => Ok(PaymentFlow::WalletTopup),
        "TPV" => Ok(PaymentFlow::TPV),
        "VISA_CHECKOUT" => Ok(PaymentFlow::VisaCheckout),
        "AUTO_DISBURSEMENT" => Ok(PaymentFlow::AutoDisbursement),
        "AUTO_USER_REGISTRATION" => Ok(PaymentFlow::AutoUserRegistration),
        "BANK_INSTANT_REFUND" => Ok(PaymentFlow::BankInstantRefund),
        "MANDATE_PREDEBIT_NOTIFICATION_DISABLEMENT" => {
            Ok(PaymentFlow::MandatePredebitNotificationDisablement)
        }
        "ORDER_AMOUNT_AS_SUBVENTION_AMOUNT" => Ok(PaymentFlow::OrderAmountAsSubventionAmount),
        "ORDER_ID_AS_RECON_ID" => Ok(PaymentFlow::OrderIdAsReconId),
        "PASS_USER_TOKEN_TO_GATEWAY" => Ok(PaymentFlow::PassUserTokenToGateway),
        "S2S_FLOW" => Ok(PaymentFlow::S2sFlow),
        "SPLIT_SETTLE_ONLY" => Ok(PaymentFlow::SplitSettleOnly),
        "SUBSCRIPTION_ONLY" => Ok(PaymentFlow::SubscriptionOnly),
        "TPV_ONLY" => Ok(PaymentFlow::TpvOnly),
        "TXN_UUID_AS_TR" => Ok(PaymentFlow::TxnUuidAsTr),
        "UPI_INTENT_REGISTRATION" => Ok(PaymentFlow::UpiIntentRegistration),
        "V2_INTEGRATION" => Ok(PaymentFlow::V2Integration),
        "V2_LINK_AND_PAY" => Ok(PaymentFlow::V2LinkAndPay),
        "VPOS2" => Ok(PaymentFlow::VPOS2),
        "OUTAGE" => Ok(PaymentFlow::OUTAGE),
        "SR_BASED_ROUTING" => Ok(PaymentFlow::SrBasedRouting),
        "ELIMINATION_BASED_ROUTING" => Ok(PaymentFlow::EliminationBasedRouting),
        "PL_BASED_ROUTING" => Ok(PaymentFlow::PlBasedRouting),
        "MANDATE_WORKFLOW" => Ok(PaymentFlow::MandateWorkflow),
        "ALTID" => Ok(PaymentFlow::ALTID),
        "SURCHARGE" => Ok(PaymentFlow::SURCHARGE),
        "OFFER" => Ok(PaymentFlow::OFFER),
        "CAPTCHA" => Ok(PaymentFlow::CAPTCHA),
        "PAYMENT_COLLECTION_LINK" => Ok(PaymentFlow::PaymentCollectionLink),
        "AUTO_REFUND" => Ok(PaymentFlow::AutoRefund),
        "PAYMENT_LINK" => Ok(PaymentFlow::PaymentLink),
        "PAYMENT_FORM" => Ok(PaymentFlow::PaymentForm),
        "RISK_CHECK" => Ok(PaymentFlow::RiskCheck),
        "DYNAMIC_CURRENCY_CONVERSION" => Ok(PaymentFlow::DynamicCurrencyConversion),
        "PART_PAYMENT" => Ok(PaymentFlow::PartPayment),
        "STANDALONE_AUTHENTICATION" => Ok(PaymentFlow::StandaloneAuthentication),
        "STANDALONE_AUTHORIZATION" => Ok(PaymentFlow::StandaloneAuthorization),
        "STANDALONE_CAPTURE" => Ok(PaymentFlow::StandaloneCapture),
        "AUTHN_AUTHZ" => Ok(PaymentFlow::AuthnAuthz),
        "AUTHZ_CAPTURE" => Ok(PaymentFlow::AuthzCapture),
        "REDIRECT_DEBIT" => Ok(PaymentFlow::RedirectDebit),
        "LINK_AND_DEBIT" => Ok(PaymentFlow::LinkAndDebit),
        "NEW_CARD" => Ok(PaymentFlow::NewCard),
        "NETWORK_TOKEN_CREATED" => Ok(PaymentFlow::NetworkTokenCreated),
        "ISSUER_TOKEN_CREATED" => Ok(PaymentFlow::IssuerTokenCreated),
        "LOCKER_TOKEN_CREATED" => Ok(PaymentFlow::LockerTokenCreated),
        "SODEXO_TOKEN_CREATED" => Ok(PaymentFlow::SodexoTokenCreated),
        "NETWORK_TOKEN_USED" => Ok(PaymentFlow::NetworkTokenUsed),
        "ISSUER_TOKEN_USED" => Ok(PaymentFlow::IssuerTokenUsed),
        "LOCKER_TOKEN_USED" => Ok(PaymentFlow::LockerTokenUsed),
        "SODEXO_TOKEN_USED" => Ok(PaymentFlow::SodexoTokenUsed),
        "PAYU_TOKEN_USED" => Ok(PaymentFlow::PayuTokenUsed),
        "MANDATE_REGISTER" => Ok(PaymentFlow::MandateRegister),
        "MANDATE_REGISTER_DEBIT" => Ok(PaymentFlow::MandateRegisterDebit),
        "MANDATE_PAYMENT" => Ok(PaymentFlow::MandatePayment),
        "EMANDATE_REGISTER" => Ok(PaymentFlow::EmandateRegister),
        "EMANDATE_REGISTER_DEBIT" => Ok(PaymentFlow::EmandateRegisterDebit),
        "EMANDATE_PAYMENT" => Ok(PaymentFlow::EmandatePayment),
        "SI_HUB" => Ok(PaymentFlow::SiHub),
        "TPV_EMANDATE" => Ok(PaymentFlow::TpvEmandate),
        "COLLECT" => Ok(PaymentFlow::COLLECT),
        "INTENT" => Ok(PaymentFlow::INTENT),
        "INAPP" => Ok(PaymentFlow::INAPP),
        "QR" => Ok(PaymentFlow::QR),
        "PUSH_PAY" => Ok(PaymentFlow::PushPay),
        "INSTANT_REFUND" => Ok(PaymentFlow::InstantRefund),
        "ASYNC" => Ok(PaymentFlow::ASYNC),
        "DOTP" => Ok(PaymentFlow::DOTP),
        "MERCHANT_MANAGED_DEBIT" => Ok(PaymentFlow::MerchantManagedDebit),
        "ADDRESS_VERIFICATION" => Ok(PaymentFlow::AddressVerification),
        "TA_FILE" => Ok(PaymentFlow::TaFile),
        "PAYMENT_PAGE" => Ok(PaymentFlow::PaymentPage),
        "PP_QUICKPAY" => Ok(PaymentFlow::PpQuickpay),
        "PP_RETRY" => Ok(PaymentFlow::PpRetry),
        "INAPP_NEW_PAY" => Ok(PaymentFlow::InappNewPay),
        "INAPP_REPEAT_PAY" => Ok(PaymentFlow::InappRepeatPay),
        "PG_EMI" => Ok(PaymentFlow::PgEmi),
        "SILENT_RETRY" => Ok(PaymentFlow::SilentRetry),
        "FIDO" => Ok(PaymentFlow::FIDO),
        "REFUND" => Ok(PaymentFlow::REFUND),
        "CTP" => Ok(PaymentFlow::CTP),
        "ONE_TIME_PAYMENT" => Ok(PaymentFlow::OneTimePayment),
        "NO_COST_EMI" => Ok(PaymentFlow::NoCostEmi),
        "LOW_COST_EMI" => Ok(PaymentFlow::LowCostEmi),
        "STANDARD_EMI" => Ok(PaymentFlow::StandardEmi),
        "STANDARD_EMI_SPLIT" => Ok(PaymentFlow::StandardEmiSplit),
        "INTERNAL_NO_COST_EMI" => Ok(PaymentFlow::InternalNoCostEmi),
        "INTERNAL_LOW_COST_EMI" => Ok(PaymentFlow::InternalLowCostEmi),
        "INTERNAL_NO_COST_EMI_SPLIT" => Ok(PaymentFlow::InternalNoCostEmiSplit),
        "INTERNAL_LOW_COST_EMI_SPLIT" => Ok(PaymentFlow::InternalLowCostEmiSplit),
        "DIRECT_BANK_EMI" => Ok(PaymentFlow::DirectBankEmi),
        "REVERSE_PENNY_DROP" => Ok(PaymentFlow::ReversePennyDrop),
        "TOPUP" => Ok(PaymentFlow::TOPUP),
        "ON_DEMAND_SPLIT_SETTLEMENT" => Ok(PaymentFlow::OnDemandSplitSettlement),
        "CREDIT_CARD_ON_UPI" => Ok(PaymentFlow::CreditCardOnUpi),
        "DECIDER_FALLBACK_DOTP_TO_3DS" => Ok(PaymentFlow::DeciderFallbackDotpTo3ds),
        "DECIDER_FALLBACK_NO_3DS_TO_3DS" => Ok(PaymentFlow::DeciderFallbackNo3dsTo3ds),
        "PAYMENT_CHANNEL_FALLBACK_DOTP_TO_3DS" => Ok(PaymentFlow::PaymentChannelFallbackDotpTo3ds),
        "PG_FAILURE_FALLBACK_DOTP_TO_3DS" => Ok(PaymentFlow::PgFailureFallbackDotpTo3ds),
        "TOKENIZATION_CONSENT_FALLBACK_DOTP_TO_3DS" => {
            Ok(PaymentFlow::TokenizationConsentFallbackDotpTo3ds)
        }
        "CUSTOMER_FALLBACK_DOTP_TO_3DS" => Ok(PaymentFlow::CustomerFallbackDotpTo3ds),
        "AUTH_PROVIDER_FALLBACK_3DS2_TO_3DS" => Ok(PaymentFlow::AuthProviderFallback3ds2To3ds),
        "FRM_PREFERENCE_TO_NO_3DS" => Ok(PaymentFlow::FrmPreferenceToNo3ds),
        "MERCHANT_FALLBACK_3DS2_TO_3DS" => Ok(PaymentFlow::MerchantFallback3ds2To3ds),
        "MERCHANT_FALLBACK_FIDO_TO_3DS" => Ok(PaymentFlow::MerchantFallbackFidoTo3ds),
        "ORDER_PREFERENCE_FALLBACK_NO_3DS_TO_3DS" => {
            Ok(PaymentFlow::OrderPreferenceFallbackNo3dsTo3ds)
        }
        "MERCHANT_PREFERENCE_FALLBACK_NO_3DS_TO_3DS" => {
            Ok(PaymentFlow::MerchantPreferenceFallbackNo3dsTo3ds)
        }
        "ORDER_PREFERENCE_TO_NO_3DS" => Ok(PaymentFlow::OrderPreferenceToNo3ds),
        "MUTUAL_FUND" => Ok(PaymentFlow::MutualFund),
        "CROSS_BORDER_PAYMENT" => Ok(PaymentFlow::CrossBorderPayment),
        "APPLEPAY_TOKEN_DECRYPTION_FLOW" => Ok(PaymentFlow::ApplepayTokenDecryptionFlow),
        "ONE_TIME_MANDATE" => Ok(PaymentFlow::OneTimeMandate),
        "SINGLE_BLOCK_MULTIPLE_DEBIT" => Ok(PaymentFlow::SingleBlockMultipleDebit),
        _ => Err(ApiError::ParsingError("Invalid Payment Flow")),
    }
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum Purpose {
    AFFORDABILITY,
    COMPLIANT,
    InternalConfig,
    SrImprovement,
    UexImprovement,
    PAYMENT,
    SECURITY,
    OPTIMIZATION,
    NoCodePayment,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum Category {
    PREMIUM,
    STANDARD,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum ControlLevel {
    GATEWAY,
    MERCHANT,
    MerchantGateway,
    TENANT,
    TenantGateway,
    TrackingOnly,
    MerchantGatewayAccount,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum FlowStatus {
    BETA,
    LIVE,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum MicroPaymentFlowType {
    ARRAY,
    BOOLEAN,
    DOUBLE,
    OBJECT,
    STRING,
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Serialize, Deserialize)]
pub enum UiAccessMode {
    ReadOnly,
    HIDDEN,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct AddressVerification {
    #[serde(rename = "collectAvsInfo")]
    pub collectAvsInfo: Option<bool>,
}
